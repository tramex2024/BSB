// public/js/modules/uiManager.js

// FunÃ§Ã£o para atualizar a interface de usuÃ¡rio com o estado do bot
export function updateBotUI(state) {
    // ðŸš¨ DIAGNÃ“STICO DO FRONTEND: Verificamos o objeto de estado completo recebido
    
    const statusColors = {
Â  Â  Â  Â  RUNNING: 'text-green-400',
Â  Â  Â  Â  STOPPED: 'text-red-400',
Â  Â  Â  Â  BUYING: 'text-blue-400',
Â  Â  Â  Â  SELLING: 'text-yellow-400',
Â  Â  Â  Â  NO_COVERAGE: 'text-purple-400'
Â  Â  };

Â  Â  const lstateElement = document.getElementById('aubot-lstate');
Â  Â  const sstateElement = document.getElementById('aubot-sstate');
Â  Â  const startStopButton = document.getElementById('austart-btn');
Â  Â  const autobotSettings = document.getElementById('autobot-settings');
Â  Â Â 
Â  Â  const elementsToUpdate = {
Â  Â  Â  Â  // Usa o ID 'auprofit' do HTML para mostrar o campo 'totalProfit'
Â  Â  Â  Â  auprofit: 'totalProfit', 
Â  Â  Â  Â  
Â  Â  Â  Â  aulbalance: 'lbalance',
Â  Â  Â  Â  ausbalance: 'sbalance',
Â  Â  Â  Â  aultprice: 'ltprice',
Â  Â  Â  Â  austprice: 'stprice',
Â  Â  Â  Â  aulcycle: 'lcycle',
Â  Â  Â  Â  auscycle: 'scycle',
Â  Â  Â  Â  aulcoverage: 'lcoverage',
Â  Â  Â  Â  auscoverage: 'scoverage',
Â  Â  Â  Â  aulnorder: 'lnorder',
Â  Â  Â  Â  ausnorder: 'snorder'
Â  Â  };

Â  Â  if (lstateElement) {
Â  Â  Â  Â  lstateElement.textContent = state.lstate;
Â  Â  Â  Â  lstateElement.className = '';
Â  Â  Â  Â  lstateElement.classList.add(statusColors[state.lstate] || 'text-red-400');
Â  Â  }

Â  Â  if (sstateElement) {
Â  Â  Â  Â  sstateElement.textContent = state.sstate;
Â  Â  Â  Â  sstateElement.className = '';
Â  Â  Â  Â  sstateElement.classList.add(statusColors[state.sstate] || 'text-red-400');
Â  Â  }

Â  Â  for (const [elementId, dataKey] of Object.entries(elementsToUpdate)) {
Â  Â  Â  Â  const element = document.getElementById(elementId);
Â  Â  Â  Â  if (element) {
Â  Â  Â  Â  Â  Â  let value;
            if (state[dataKey] !== undefined) {
                // Tentativa de conversÃ£o
                value = parseFloat(state[dataKey]); 
            } else {
                value = NaN; // Usamos NaN para simplificar a verificaÃ§Ã£o
            }

            // Aplicar formato segundo o tipo de dado
            if (dataKey === 'totalProfit' || dataKey === 'profit') {
                // Se a conversÃ£o falhou (retornou NaN) ou o valor nÃ£o estÃ¡ definido, mostra N/A.
                if (isNaN(value)) {
                    element.textContent = 'N/A';
                } else {
                    // Total Profit ou Profit por ciclo (2 decimais, se mostra com $)
                    element.textContent = `$${value.toFixed(2)}`;
                }
            } else if (dataKey === 'lcoverage' || dataKey === 'scoverage' || dataKey === 'lbalance' || dataKey === 'sbalance') {
                // Montos de dinheiro/balance (2 decimales)
                element.textContent = isNaN(value) ? 'N/A' : value.toFixed(2);
            } else if (dataKey === 'lnorder' || dataKey === 'snorder' || dataKey === 'lcycle' || dataKey === 'scycle') {
                // Contadores (0 decimales)
                element.textContent = isNaN(value) ? 'N/A' : value.toFixed(0);
            } else {
                // Outros (preÃ§os, etc.)
                element.textContent = state[dataKey] !== undefined ? state[dataKey] : 'N/A';
            }
Â  Â  Â  Â  }
Â  Â  }
Â  Â Â 
Â  Â  const isStopped = state.lstate === 'STOPPED' && state.sstate === 'STOPPED';
Â  Â Â 
Â  Â  if (autobotSettings) {
Â  Â  Â  Â  const inputs = autobotSettings.querySelectorAll('input, select');
Â  Â  Â  Â  inputs.forEach(input => {
Â  Â  Â  Â  Â  Â  input.disabled = !isStopped;
Â  Â  Â  Â  });
Â  Â  }

Â  Â  if (startStopButton) {
Â  Â  Â  Â  startStopButton.textContent = isStopped ? 'START' : 'STOP';
Â  Â  Â  Â  startStopButton.classList.remove('start-btn', 'stop-btn');
Â  Â  Â  Â  startStopButton.classList.add(isStopped ? 'start-btn' : 'stop-btn');
Â  Â  }
}

// FunÃ§Ã£o para mostrar mensagens de estado na UI
export function displayMessage(message, type) {
Â  Â  const messageContainer = document.getElementById('message-container');
Â  Â  if (messageContainer) {
Â  Â  Â  Â  messageContainer.textContent = message;
Â  Â  Â  Â  messageContainer.className = `message ${type}`;
Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  Â  messageContainer.textContent = '';
Â  Â  Â  Â  Â  Â  messageContainer.className = 'message';
Â  Â  Â  Â  }, 5000); // El mensaje desaparece despuÃ©s de 5 segundos
Â  Â  }
}
