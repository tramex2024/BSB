// BSB/server/autobotLogic.js (FINALIZADO - Soporte Short y Long Completo)

const Autobot = require('./models/Autobot');
const bitmartService = require('./services/bitmartService');
const { runLongStrategy, setDependencies: setLongDeps } = require('./src/longStrategy');
const { runShortStrategy, setDependencies: setShortDeps } = require('./src/shortStrategy'); 

let io;

function setIo(socketIo) {
    io = socketIo;
}

function log(message, type = 'info') {
    if (io) {
        io.emit('bot-log', { message, type, timestamp: new Date().toISOString() });
    }
    console.log(`[BOT LOG]: ${message}`);
}

/**
 * Función que actualiza únicamente el estado principal del bot (lstate/sstate).
 * * NOTA DE CAMBIO: Se eliminó la doble lectura de DB y la emisión de Socket.IO aquí.
 * Ahora, el estado completo se emitirá de forma centralizada en server.js (updateBotStateWithPrice) 
 * una vez que botCycle haya terminado.
 */
async function updateBotState(newState, strategy) {
    try {
        const updateField = strategy === 'long' ? 'lstate' : 'sstate';
        
        // Solo guardamos el nuevo estado principal
        await Autobot.findOneAndUpdate({}, { [updateField]: newState });
        
        log(`Estado de la estrategia ${strategy} actualizado a: ${newState}`, 'info');
    } catch (error) {
        log(`Error al actualizar el estado: ${error.message}`, 'error');
    }
}

/**
 * Función que actualiza únicamente los datos del ciclo Long (lStateData) en la base de datos.
 * @param {object} lStateData - El objeto lStateData actualizado.
 */
async function updateLStateData(lStateData) {
    try {
        await Autobot.findOneAndUpdate({}, { 'lStateData': lStateData });  
    } catch (error) {
        log(`Error al guardar lStateData: ${error.message}`, 'error');
    }
}

/**
 * Función que actualiza únicamente los datos del ciclo Short (sStateData) en la base de datos.
 * @param {object} sStateData - El objeto sStateData actualizado.
 */
async function updateSStateData(sStateData) {
    try {
        await Autobot.findOneAndUpdate({}, { 'sStateData': sStateData });  
    } catch (error) {
        log(`Error al guardar sStateData: ${error.message}`, 'error');
    }
}

/**
 * Función genérica para actualizar campos top-level en el modelo Autobot (usado para LBalance/SBalance, etc.).
 * Esta será la función clave para agregar tu nuevo dato (ej. totalAccumulatedProfit).
 * @param {object} fieldsToUpdate - Objeto con { campo: nuevoValor, ... }
 */
async function updateGeneralBotState(fieldsToUpdate) {
    try {
        await Autobot.findOneAndUpdate({}, { $set: fieldsToUpdate });
    } catch (error) {
        log(`Error al actualizar campos generales del estado del bot: ${error.message}`, 'error');
    }
}


async function botCycle(priceFromWebSocket) {
    try {
        // Primera lectura del estado del bot al inicio de cada ciclo
        let botState = await Autobot.findOne({}); 
        const currentPrice = parseFloat(priceFromWebSocket); 

        if (!botState || isNaN(currentPrice) || currentPrice <= 0) {
            if (priceFromWebSocket !== 'N/A') { 
                log(`Precio recibido no válido o botState no encontrado. Precio: ${priceFromWebSocket}`, 'warning');
            }
            return;
        }

        // Obtener saldos reales de la API (importante para decisiones de trading)
        const { availableUSDT, availableBTC } = await bitmartService.getAvailableTradingBalances();

        // Objeto de dependencias inyectado en las estrategias
        const dependencies = {
            log,
            io,
            bitmartService,
            Autobot,
            currentPrice, 
            availableUSDT, 
            availableBTC, 
            botState, // Estado leído de la DB al inicio del ciclo (recuperación)
            
            config: botState.config,
            creds: {
                apiKey: process.env.BITMART_API_KEY,
                secretKey: process.env.BITMART_SECRET_KEY,
                memo: process.env.BITMART_API_MEMO
            },
            
            updateBotState, 
            updateLStateData, 
            updateSStateData,
            updateGeneralBotState 
        };

        setLongDeps(dependencies);
        setShortDeps(dependencies);

        if (botState.lstate !== 'STOPPED') {
            // La estrategia LONG se ejecuta con el estado actual (recuperado)
            await runLongStrategy();
        }
//        if (botState.sstate !== 'STOPPED') {
//            await runShortStrategy();
//        }
        
    } catch (error) {
        log(`Error en el ciclo principal del bot: ${error.message}`, 'error');
    }
}


async function balanceCycle() {
    try {
        const balancesArray = await bitmartService.getBalance({
            apiKey: process.env.BITMART_API_KEY,
            secretKey: process.env.BITMART_SECRET_KEY,
            apiMemo: process.env.BITMART_API_MEMO
        });
        
        const usdtBalance = balancesArray.find(b => b.currency === 'USDT');
        const btcBalance = balancesArray.find(b => b.currency === 'BTC');

        if (!usdtBalance || !btcBalance) {
            log('No se pudieron obtener los balances de la cuenta.', 'error');
            return;
        }

        io.emit('wallet-balances', {
            USDT: { available: parseFloat(usdtBalance.available), frozen: parseFloat(usdtBalance.frozen) },
            BTC: { available: parseFloat(btcBalance.available), frozen: parseFloat(btcBalance.frozen) }
        });

    } catch (error) {
        log(`Error en el ciclo de balances: ${error.message}`, 'error');
    }
}

async function start() {
    log('El bot se ha iniciado. El ciclo lo controla server.js', 'success');
}

async function stop() {
    log('El bot se ha detenido. El ciclo lo controla server.js', 'success');
}

module.exports = {
    setIo,
    start,
    stop,
    log,
    botCycle,   
    balanceCycle, 
    updateBotState,
    updateLStateData,
    updateSStateData,
    updateGeneralBotState
};