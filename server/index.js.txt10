require('dotenv').config();
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const mongoose = require('mongoose');
const userRoutes = require('./routes/userRoutes');
const autobotLogic = require('./autobotLogic');
const path = require('path');
const { expressCspHeader, INLINE_SCRIPT, SELF } = require('express-csp-header');

const app = express();
const server = http.createServer(app);
const io = new Server(server);

const PORT = process.env.PORT || 3000;
const MONGODB_URI = process.env.MONGODB_URI;

// Middleware para JSON y URL-encoded
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Configuración de CSP
app.use(expressCspHeader({
    directives: {
        'default-src': [SELF, 'https://api.bitmart.com'],
        'script-src': [SELF, INLINE_SCRIPT, 'https://s3.tradingview.com', 'https://cdnjs.cloudflare.com', 'https://cdn.tailwindcss.com', 'https://code.jquery.com'],
        'style-src': [SELF, INLINE_SCRIPT, 'https://cdnjs.cloudflare.com', 'https://fonts.googleapis.com'],
        'img-src': [SELF, 'data:', 'https://www.tradingview.com'],
        'font-src': [SELF, 'https://cdnjs.cloudflare.com', 'https://fonts.gstatic.com'],
        'connect-src': [SELF, 'ws://localhost:3000', 'wss://localhost:3000', 'https://api.bitmart.com'],
        'object-src': ['none'],
        'media-src': ['none'],
        'frame-src': ['https://www.tradingview.com'],
        'worker-src': [SELF]
    }
}));


// Conexión a la base de datos
mongoose.connect(MONGODB_URI)
    .then(() => {
        console.log('✅ Conectado a MongoDB Atlas');
        // Cargar el estado global del bot al iniciar el servidor
        autobotLogic.loadBotStateFromDB();
    })
    .catch(err => {
        console.error('❌ Error de conexión a MongoDB:', err.message);
    });

// Servir archivos estáticos desde la carpeta 'public'
app.use(express.static(path.join(__dirname, '../public')));

// Inyectar la instancia de Socket.IO en autobotLogic
autobotLogic.setIoInstance(io);

// Configuración de Socket.IO
io.on('connection', (socket) => {
    console.log(`⚡️ Usuario conectado: ${socket.id}`);

    // Asocia el socket ID con el userId si se autentica
    socket.on('authenticate', (userId) => {
        socket.join(userId); // Unir el socket a una sala específica del usuario
        console.log(`⚡️ Socket ${socket.id} autenticado y unido a la sala del usuario: ${userId}`);
    });

    socket.on('disconnect', () => {
        console.log('🔌 Usuario desconectado');
    });
});

// Rutas API
app.use('/api/users', userRoutes);

// Ruta para servir la página principal
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '../public', 'index.html'));
});

// Iniciar el servidor
server.listen(PORT, () => {
    console.log(`🚀 Servidor corriendo en http://localhost:${PORT}`);
});