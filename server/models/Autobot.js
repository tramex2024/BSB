// models/Autobot.js (FINALIZADO - Soporte Long y Short Completo)

const mongoose = require('mongoose');

// =========================================================================
// ESQUEMA DE DATOS DE ESTRATEGIA (ÃšNICO para Long y Short)
// * ppc/pps: Precio Promedio de Compra/Venta en Corto
// * ac: Cantidad Acumulada de BTC/Activo
// * pm: Price Maximum (Long) / Price Minimum (Short)
// * pc: Price Cover/Cutoff (Trailing Stop/Protection)
// =========================================================================
const strategyDataSchema = new mongoose.Schema({
Â  Â  ppc: { type: Number, default: 0 }, // Long: Precio Promedio de Compra (PPC) | Short: Precio Promedio de Short (PPS)
Â  Â  ac: { type: Number, default: 0 }, // Cantidad Acumulada de BTC/Activo
Â  Â  ppv: { type: Number, default: 0 }, // Este campo no es usado en tu lÃ³gica actual, se mantiene por si acaso
Â  Â  av: { type: Number, default: 0 }, // Este campo no es usado en tu lÃ³gica actual, se mantiene por si acaso
Â  Â  orderCountInCycle: { type: Number, default: 0 },
Â  Â  lastOrder: { type: Object, default: null },
Â  Â  pm: { type: Number, default: 0 }, // Long: MÃ¡ximo Alcanzado | Short: MÃ­nimo Alcanzado
Â  Â  pc: { type: Number, default: 0 }, // Precio de Corte/Cubrimiento (Trailing Stop)
Â  Â  // ðŸ’¡ AÃ‘ADIDO: Campos de Contingencia para NO_COVERAGE
Â  Â  requiredCoverageAmount: { type: Number, default: 0 },Â 
Â  Â  nextCoveragePrice: { type: Number, default: 0 }
});

// =========================================================================
// ESQUEMA DE CONFIGURACIÃ“N
// =========================================================================
const configSchema = new mongoose.Schema({
Â  Â  symbol: { type: String, default: "BTC_USDT" },
Â  Â  long: {
Â  Â  Â  Â  enabled: { type: Boolean, default: false },
Â  Â  Â  Â  amountUsdt: { type: Number, default: 5.00 },
Â  Â  Â  Â  purchaseUsdt: { type: Number, default: 5.00 },
Â  Â  Â  Â  price_var: { type: Number, default: 0.1 },
Â  Â  Â  Â  size_var: { type: Number, default: 5.0 },
Â  Â  Â  Â  profit_percent: { type: Number, default: 1.5 } // Renombrado de 'trigger'
Â  Â  },
Â  Â  short: {
Â  Â  Â  Â  enabled: { type: Boolean, default: false },Â  Â  Â  Â Â 
	amountBtc: { type: Number, default: 0.00005 }, // Capital total asignado (BTC)
Â  Â  Â  Â  sellBtc: { type: Number, default: 0.00005 }, // Monto de la orden inicial/cobertura (BTC)
Â  Â  Â  Â  price_var: { type: Number, default: 0.1 },
Â  Â  Â  Â  size_var: { type: Number, default: 5.0 },
Â  Â  Â  Â  profit_percent: { type: Number, default: 1.5 }Â 
Â  Â  },
Â  Â  stopAtCycle: { type: Boolean, default: false }
});

// =========================================================================
// ESQUEMA PRINCIPAL DE AUTOBOT
// =========================================================================
const autobotSchema = new mongoose.Schema({
    // âœ… Campo totalProfit, que ya estÃ¡ definido correctamente.
Â  Â  totalProfit: { type: Number, default: 10000.00 },
Â  Â  lstate: { type: String, default: 'STOPPED' },
Â  Â  sstate: { type: String, default: 'STOPPED' },
Â  Â  lbalance: { type: Number, default: 0 },
Â  Â  sbalance: { type: Number, default: 0 },
Â  Â Â 
Â  Â  // ðŸ’¡ ltprice ya fue renombrado a LTPrice dentro de lStateData (ajuste necesario)
Â  Â  // Se mantiene aquÃ­ por si lo usas en el Front-End.
Â  Â  ltprice: { type: Number, default: 0 },Â 
Â  Â  stprice: { type: Number, default: 0 },Â 

Â  Â  lcycle: { type: Number, default: 0 },
Â  Â  scycle: { type: Number, default: 0 },
Â  Â Â 
Â  Â  // ðŸ’¡ COBERTURA/Ã“RDENES PENDIENTES (Se usan para el Front-End)
Â  Â  lcoverage: { type: Number, default: 0 },Â 
Â  Â  scoverage: { type: Number, default: 0 },Â 
Â  Â  lnorder: { type: Number, default: 0 },Â 
Â  Â  snorder: { type: Number, default: 0 },Â 
Â  Â Â 
Â  Â  lStateData: { type: strategyDataSchema, default: {} },
Â  Â  sStateData: { type: strategyDataSchema, default: {} }, // ðŸ’¡ AÃ‘ADIDO: SStateData
Â  Â  config: { type: configSchema, default: {} },
Â  Â  lastUpdateTime: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Autobot', autobotSchema);
