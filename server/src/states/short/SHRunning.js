// BSB/server/src/states/short/SHRunning.js (FINALIZADO - Chequeo de Capital en USDT)

const { placeFirstSellOrder, MIN_USDT_VALUE_FOR_BITMART } = require('../../utils/orderManagerShort');
const SSTATE = 'short';

async function run(dependencies) {
Â  Â  // Aseguramos que currentPrice se recibe para el cÃ¡lculo nocional
Â  Â  const { botState, availableUSDT, config, log, updateBotState, updateGeneralBotState, currentPrice } = dependencies;

Â  Â  log("Estado Short: RUNNING. Evaluando inicio de ciclo...", 'info');

Â  Â  // ------------------------------------------------------------------
    // 1. OBTENER MONTOS Y CALCULAR VALORES NOCIONALES EN USDT
Â  Â  // ------------------------------------------------------------------
Â  Â  const sellBtcAmount = parseFloat(config.short.sellBtc || 0);
Â  Â  const price = parseFloat(currentPrice || 0); 

    // âœ… CAPITAL ASIGNADO (SBalance) CONVERTIDO A VALOR NOCIONAL EN USDT
    const currentSBalanceBTC = parseFloat(botState.sbalance || 0); 
    const currentSBalanceUSDT = currentSBalanceBTC * price; 

Â  Â  // âœ… ORDEN INICIAL CONVERTIDA A VALOR NOCIONAL EN USDT
Â  Â  const purchaseAmountUSDT = sellBtcAmount * price; 
    
    // ------------------------------------------------------------------
    // 2. CHEQUEO DE SUFICIENCIA (Todos los montos estÃ¡n ahora en USDT)
    // ------------------------------------------------------------------
Â  Â  const isSufficient = currentSBalanceUSDT >= purchaseAmountUSDT &&Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â availableUSDT >= purchaseAmountUSDT &&Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â purchaseAmountUSDT >= MIN_USDT_VALUE_FOR_BITMART;

Â  Â  if (isSufficient) {
Â  Â  Â  Â  log(`Condiciones de inicio cumplidas. Capital asignado (USDT): ${currentSBalanceUSDT.toFixed(2)}.`, 'success');
Â  Â  Â  Â Â 
Â  Â  Â  Â  await updateBotState('BUYING', SSTATE); // Transiciona para esperar la cubertura (BUY)
Â  Â  Â  Â Â 
Â  Â  Â  Â  // Colocar la primera orden de VENTA en corto
Â  Â  Â  Â  await placeFirstSellOrder(config, dependencies.creds, log, updateBotState, updateGeneralBotState, currentPrice);

Â  Â  } else {
Â  Â  Â  Â  let reason = '';
Â  Â  Â  Â  
        if (price === 0) {
            reason = `No se pudo obtener el precio actual del mercado (price=0).`;
        } else if (currentSBalanceUSDT < purchaseAmountUSDT) {
Â  Â  Â  Â  Â  Â  // ðŸ’¡ AquÃ­ se usarÃ¡ el valor actual de tu log: 0.00 USDT vs 6.26 USDT
Â  Â  Â  Â  Â  Â  reason = `Fondo ASIGNADO (USDT Nocional: ${currentSBalanceUSDT.toFixed(2)}) insuficiente para orden de ${purchaseAmountUSDT.toFixed(2)} USDT.`;
Â  Â  Â  Â  } else if (availableUSDT < purchaseAmountUSDT) {
Â  Â  Â  Â  Â  Â  reason = `Fondos REALES (${availableUSDT.toFixed(2)} USDT) insuficientes.`;
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  reason = `Monto inicial (${purchaseAmountUSDT.toFixed(2)} USDT) menor que el mÃ­nimo de BitMart (${MIN_USDT_VALUE_FOR_BITMART}).`;
Â  Â  Â  Â  }
Â  Â  Â  Â Â 
Â  Â  Â  Â  log(`No se puede iniciar el ciclo Short. RazÃ³n: ${reason} Permaneciendo en RUNNING.`, 'warning');
Â  Â  }
}

module.exports = { run };